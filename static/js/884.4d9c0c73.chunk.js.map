{"version":3,"file":"static/js/884.4d9c0c73.chunk.js","mappings":"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","sources":["webpack://react-router-6-upgrade/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-router-6-upgrade/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__ce-8u\"};","import React from 'react';\nimport classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__KR4EB\",\"loading\":\"QuoteForm_loading__Ui63G\",\"control\":\"QuoteForm_control__5QUWh\",\"actions\":\"QuoteForm_actions__-tp+5\"};","import React, { Fragment, useEffect, useState } from 'react';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n\n  const [authorInputValue, setAuthorInputValue] = useState('');\n  const [textInputValue, setTextInputValue] = useState('');\n  const [isButtonDisabled, setIsButtonDisabled] = useState(true);\n\n  const [authorInputError, setAuthorInpurError] = useState(false);\n  const [textInputError, setTextInpurError] = useState(false);\n\n\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    props.onAddQuote({ author: authorInputValue, text: textInputValue });\n  };\n\n\n\n  useEffect(()=> {\n    const checkInputValidity = () => {\n      return (authorInputValue.length > 1 && textInputValue.length > 11);\n    };\n    setIsButtonDisabled(!checkInputValidity());\n\n  },[authorInputValue,textInputValue]);\n\n\n\n  const handleAuthorInputChange = (event) => {\n    setAuthorInputValue(event.target.value);\n\n    if(event.target.value.length > 1)\n    {\n      setAuthorInpurError(false);\n    }\n    else if(event.target.value.length < 2)\n    {\n      setAuthorInpurError(true);\n      setIsButtonDisabled(true);\n    }\n\n  };\n\n  const handleTextInputChange = (event) => {\n    setTextInputValue(event.target.value);\n\n    if(event.target.value.length > 11)\n    {\n      setTextInpurError(false);\n    }\n    else if(event.target.value.length < 12)\n    {\n      setTextInpurError(true);\n      setIsButtonDisabled(true);\n    }\n\n  };\n\n\n\n  const authorFocusHandler = () => {\n    setAuthorInpurError(true);\n  }\n\n  const quoteFocusHandler = () => {\n    setTextInpurError(true);\n  }\n\n  return (\n    <Fragment>\n      <Card>\n        <form\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' onFocus={authorFocusHandler} value={authorInputValue} onChange={handleAuthorInputChange}/>\n            {authorInputError && <p className=\"error\">Author name must be 2 characters long.</p>}\n          </div>\n          \n\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' onFocus={quoteFocusHandler} value={textInputValue} onChange={handleTextInputChange} />\n            {textInputError && <p className=\"error\">Quote must be 12 characters long.</p>}\n          </div>\n\n\n          <div className={classes.actions}>\n            <button className={`btn ${isButtonDisabled ? \"disabled\" : \"\"}`} disabled={isButtonDisabled}>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;","import React, { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport QuoteForm from '../components/quotes/QuoteForm';\nimport useHttp from '../hooks/use-http';\nimport { addQuote } from '../lib/api';\n\nconst NewQuote = () => {\n  const { sendRequest, status } = useHttp(addQuote);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (status === 'completed') {\n      navigate('/quotes');\n    }\n  }, [status, navigate]);\n\n  const addQuoteHandler = (quoteData) => {\n    sendRequest(quoteData);\n  };\n\n  return <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />;\n};\n\nexport default NewQuote;\n"],"names":["props","_jsx","className","classes","children","_useState","useState","_useState2","_slicedToArray","authorInputValue","setAuthorInputValue","_useState3","_useState4","textInputValue","setTextInputValue","_useState5","_useState6","isButtonDisabled","setIsButtonDisabled","_useState7","_useState8","authorInputError","setAuthorInpurError","_useState9","_useState10","textInputError","setTextInpurError","useEffect","length","Fragment","Card","_jsxs","onSubmit","event","preventDefault","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","type","id","onFocus","value","onChange","target","rows","concat","disabled","_useHttp","useHttp","addQuote","sendRequest","status","navigate","useNavigate","QuoteForm","quoteData"],"sourceRoot":""}